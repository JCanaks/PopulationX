module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateLocation {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Location {
  id: ID!
  name: String!
  noOfFemales: Int!
  noOfMales: Int!
  totalResidents: Int!
  parentLocation: Location
  nestedLocations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location!]
}

type LocationConnection {
  pageInfo: PageInfo!
  edges: [LocationEdge]!
  aggregate: AggregateLocation!
}

input LocationCreateInput {
  id: ID
  name: String!
  noOfFemales: Int!
  noOfMales: Int!
  totalResidents: Int!
  parentLocation: LocationCreateOneWithoutParentLocationInput
  nestedLocations: LocationCreateManyWithoutNestedLocationsInput
}

input LocationCreateManyWithoutNestedLocationsInput {
  create: [LocationCreateWithoutNestedLocationsInput!]
  connect: [LocationWhereUniqueInput!]
}

input LocationCreateOneWithoutParentLocationInput {
  create: LocationCreateWithoutParentLocationInput
  connect: LocationWhereUniqueInput
}

input LocationCreateWithoutNestedLocationsInput {
  id: ID
  name: String!
  noOfFemales: Int!
  noOfMales: Int!
  totalResidents: Int!
  parentLocation: LocationCreateOneWithoutParentLocationInput
}

input LocationCreateWithoutParentLocationInput {
  id: ID
  name: String!
  noOfFemales: Int!
  noOfMales: Int!
  totalResidents: Int!
  nestedLocations: LocationCreateManyWithoutNestedLocationsInput
}

type LocationEdge {
  node: Location!
  cursor: String!
}

enum LocationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  noOfFemales_ASC
  noOfFemales_DESC
  noOfMales_ASC
  noOfMales_DESC
  totalResidents_ASC
  totalResidents_DESC
}

type LocationPreviousValues {
  id: ID!
  name: String!
  noOfFemales: Int!
  noOfMales: Int!
  totalResidents: Int!
}

input LocationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  noOfFemales: Int
  noOfFemales_not: Int
  noOfFemales_in: [Int!]
  noOfFemales_not_in: [Int!]
  noOfFemales_lt: Int
  noOfFemales_lte: Int
  noOfFemales_gt: Int
  noOfFemales_gte: Int
  noOfMales: Int
  noOfMales_not: Int
  noOfMales_in: [Int!]
  noOfMales_not_in: [Int!]
  noOfMales_lt: Int
  noOfMales_lte: Int
  noOfMales_gt: Int
  noOfMales_gte: Int
  totalResidents: Int
  totalResidents_not: Int
  totalResidents_in: [Int!]
  totalResidents_not_in: [Int!]
  totalResidents_lt: Int
  totalResidents_lte: Int
  totalResidents_gt: Int
  totalResidents_gte: Int
  AND: [LocationScalarWhereInput!]
  OR: [LocationScalarWhereInput!]
  NOT: [LocationScalarWhereInput!]
}

type LocationSubscriptionPayload {
  mutation: MutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LocationWhereInput
  AND: [LocationSubscriptionWhereInput!]
  OR: [LocationSubscriptionWhereInput!]
  NOT: [LocationSubscriptionWhereInput!]
}

input LocationUpdateInput {
  name: String
  noOfFemales: Int
  noOfMales: Int
  totalResidents: Int
  parentLocation: LocationUpdateOneWithoutParentLocationInput
  nestedLocations: LocationUpdateManyWithoutNestedLocationsInput
}

input LocationUpdateManyDataInput {
  name: String
  noOfFemales: Int
  noOfMales: Int
  totalResidents: Int
}

input LocationUpdateManyMutationInput {
  name: String
  noOfFemales: Int
  noOfMales: Int
  totalResidents: Int
}

input LocationUpdateManyWithoutNestedLocationsInput {
  create: [LocationCreateWithoutNestedLocationsInput!]
  delete: [LocationWhereUniqueInput!]
  connect: [LocationWhereUniqueInput!]
  set: [LocationWhereUniqueInput!]
  disconnect: [LocationWhereUniqueInput!]
  update: [LocationUpdateWithWhereUniqueWithoutNestedLocationsInput!]
  upsert: [LocationUpsertWithWhereUniqueWithoutNestedLocationsInput!]
  deleteMany: [LocationScalarWhereInput!]
  updateMany: [LocationUpdateManyWithWhereNestedInput!]
}

input LocationUpdateManyWithWhereNestedInput {
  where: LocationScalarWhereInput!
  data: LocationUpdateManyDataInput!
}

input LocationUpdateOneWithoutParentLocationInput {
  create: LocationCreateWithoutParentLocationInput
  update: LocationUpdateWithoutParentLocationDataInput
  upsert: LocationUpsertWithoutParentLocationInput
  delete: Boolean
  disconnect: Boolean
  connect: LocationWhereUniqueInput
}

input LocationUpdateWithoutNestedLocationsDataInput {
  name: String
  noOfFemales: Int
  noOfMales: Int
  totalResidents: Int
  parentLocation: LocationUpdateOneWithoutParentLocationInput
}

input LocationUpdateWithoutParentLocationDataInput {
  name: String
  noOfFemales: Int
  noOfMales: Int
  totalResidents: Int
  nestedLocations: LocationUpdateManyWithoutNestedLocationsInput
}

input LocationUpdateWithWhereUniqueWithoutNestedLocationsInput {
  where: LocationWhereUniqueInput!
  data: LocationUpdateWithoutNestedLocationsDataInput!
}

input LocationUpsertWithoutParentLocationInput {
  update: LocationUpdateWithoutParentLocationDataInput!
  create: LocationCreateWithoutParentLocationInput!
}

input LocationUpsertWithWhereUniqueWithoutNestedLocationsInput {
  where: LocationWhereUniqueInput!
  update: LocationUpdateWithoutNestedLocationsDataInput!
  create: LocationCreateWithoutNestedLocationsInput!
}

input LocationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  noOfFemales: Int
  noOfFemales_not: Int
  noOfFemales_in: [Int!]
  noOfFemales_not_in: [Int!]
  noOfFemales_lt: Int
  noOfFemales_lte: Int
  noOfFemales_gt: Int
  noOfFemales_gte: Int
  noOfMales: Int
  noOfMales_not: Int
  noOfMales_in: [Int!]
  noOfMales_not_in: [Int!]
  noOfMales_lt: Int
  noOfMales_lte: Int
  noOfMales_gt: Int
  noOfMales_gte: Int
  totalResidents: Int
  totalResidents_not: Int
  totalResidents_in: [Int!]
  totalResidents_not_in: [Int!]
  totalResidents_lt: Int
  totalResidents_lte: Int
  totalResidents_gt: Int
  totalResidents_gte: Int
  parentLocation: LocationWhereInput
  nestedLocations_every: LocationWhereInput
  nestedLocations_some: LocationWhereInput
  nestedLocations_none: LocationWhereInput
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
}

input LocationWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createLocation(data: LocationCreateInput!): Location!
  updateLocation(data: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location
  updateManyLocations(data: LocationUpdateManyMutationInput!, where: LocationWhereInput): BatchPayload!
  upsertLocation(where: LocationWhereUniqueInput!, create: LocationCreateInput!, update: LocationUpdateInput!): Location!
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  location(where: LocationWhereUniqueInput!): Location
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location]!
  locationsConnection(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocationConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    